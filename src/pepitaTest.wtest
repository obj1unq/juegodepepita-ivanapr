import wollok.game.*
import pepita.*
import comidas.*
import extras.*

describe "Tests de Pepita" {
	const manzana = new Manzana(position = game.center())

	fixture {
		// El game no se reinicia en cada test: https://github.com/uqbar-project/wollok/issues/1896
		game.clear()
		game.addVisual(pepita)
		game.addVisual(manzana)
	}

	test "Al comer pepita aumenta su energia" {
		pepita.come(manzana)
		assert.equals(140, pepita.energia())
	}

	test "Al volar pepita pierde energia" {
		pepita.vola(1)
		assert.equals(91, pepita.energia())
	}

	test "Al volar mucho pepita queda cansada" {
		pepita.vola(11)
		assert.that(pepita.estaCansada())
	}

	test "Al moverse pepita pierde energia por el trayecto" {
		pepita.irA(game.at(1, 0))
		assert.equals(91, pepita.energia())
	}

	test "Al moverse pepita queda en la nueva posicion" {
		const nuevaPosicion = game.at(1, 1)
		pepita.irA(nuevaPosicion)
		assert.equals(nuevaPosicion, pepita.position())
	}

	test "Al estar en la misma posicion que el nido pepita crece" {
		pepita.energia(1000)
		pepita.irA(nido.position())
		assert.equals("pepita-grande.png", pepita.image())
	}
	test "Cuando Pepita se mueve Silvestre la persigue"{
		pepita.irA(game.at(3,5))
		assert.equals(game.at(3,0), silvestre.position())
	}
	test "Pepita al estar en la misma posicion que Silvestre se pone gris" {
		pepita.irA(game.at(3,0))
		assert.equals("pepita-gris.png", pepita.image())
	}
	test "Silvestre no puede estar a la izquierda de la pantalla" {
		pepita.irA(game.origin())
		assert.equals(game.at(3,0), silvestre.position())
	}
	test "Pepita se cansa" {
		assert.throwsException({pepita.irA(game.at(20,20))})
	}
	test "Pepita esta en el aire y cae" {
		pepita.irA(game.at(1,2))
		pepita.caerSiEstasEnElAire()
		assert.equals(game.at(1, 1), pepita.position())
	}
	test "Pepita esta en el aire y cae no pierde energia" {
		pepita.irA(game.at(1,2))
		const energiaInicial = pepita.energia()
		pepita.caerSiEstasEnElAire()
		assert.equals(energiaInicial, pepita.energia())
	}
	test "Pepita esta en el suelo entonces no cae" {
		pepita.irA(game.at(1,0))
		pepita.caerSiEstasEnElAire()
		assert.equals(game.at(1,0), pepita.position())
	}
	test "Pepita come la comida que hay debajo y sube su energia" {
		pepita.irA(manzana.position())
		const energiaInicial = pepita.energia()
		pepita.comeComidaDebajo()
		assert.that(pepita.energia() > energiaInicial)
	}
	test "Pepita come la comida que hay debajo y desaparece" {
		pepita.irA(manzana.position())
		pepita.comeComidaDebajo()
		assert.notThat(game.hasVisual(manzana))
	}
}

